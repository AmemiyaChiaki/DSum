<template>
<div>
  {{$store.state.x}}
  <svg width="500" height="500">
    <rect x=0 y=0 width="500" height="500" stroke="black"></rect>
    <rect x=100 y=100 :width="width*100" :height="height*100" stroke="white"></rect>
    <digit v-for="(h,i) in haichi"
	   :key="i"
	   @start="toFront($event)"
	   :r="h.r" :c="h.c" :d="h.d" @moveend="swap($event,i)"></digit>
    <rsum v-for="(s,i) in rsums" :r="i" :d="s"></rsum>
    <csum v-for="(s,i) in csums" :c="i" :d="s"></csum>
    <text v-if="completed()" x=100 y=400 fill="red" stroke="red" font-size=50>clear</text>
  </svg>
</div>

</template>

<script>
import digit from "~/components/digit.vue"
import rsum from "~/components/rsum.vue"
import csum from "~/components/csum.vue"
export default{
    props:["width","height"],
    data(){
	return{
	   rsums:[8,9,8,],
csums:[5,13,7,],
haichi:[{r:1,c:1,d:2},
{r:1,c:2,d:1},
{r:1,c:3,d:2},
{r:2,c:1,d:4},
{r:2,c:2,d:2},
{r:2,c:3,d:5},
{r:3,c:1,d:2},
{r:3,c:2,d:4},
{r:3,c:3,d:3},
],


	    /*rsums:[14,15,16],
	    csums:[14,15,16],
	    haichi:[{r:1,c:2,d:2},
		    {r:2,c:1,d:8},
		    {r:1,c:1,d:1},
		    {r:1,c:3,d:3},
		    {r:2,c:2,d:9},
		    {r:2,c:3,d:4},
		    {r:3,c:1,d:7},
		    {r:3,c:2,d:6},
		    {r:3,c:3,d:5}]*/
	}
    },
    components:{
	digit,rsum,csum
    },
    methods:{
	swap(e,i){
	    console.log(e)
	    let h=this.haichi[i]
	    const newr=e.dr+h.r
	    const newc=e.dc+h.c
	    const j=this.haichi.findIndex((el)=>(el.r==newr&&el.c==newc))
	    this.haichi.splice(i,1,{r:e.dr+h.r,c:e.dc+h.c,d:h.d})
	    if(j!=-1){
		this.haichi.splice(j,1,{r:h.r,c:h.c,d:this.haichi[j].d})
	    }
	},
	completed(){
	    const rsum=[]
	    const csum=[]
	    for(let i=0;i<this.height;i++){
		rsum.push(0)
	    }
	    for(let i=0;i<this.width;i++){
		csum.push(0)
	    }
	    for(let p of this.haichi){
		rsum[p.r-1]+=p.d
		csum[p.c-1]+=p.d
	    }
	    console.log(rsum,csum)
	    if(JSON.stringify(rsum)==JSON.stringify(this.rsums)&&
	       JSON.stringify(csum)==JSON.stringify(this.csums)){
		return true
	    }else{
		return false
	    }
	},
	toFront(ev){
	    console.log(ev)
	    const i=this.haichi.findIndex((el)=>(el.r==ev.r&&el.c==ev.c))
	    const top=this.haichi[i]
	    this.haichi.splice(i,1)
	    this.haichi.push(top)
	}
	
    }
}
</script>
